javascript:(async()=>{if(!window.JSZip){await new Promise(r=>{const s=document.createElement('script');s.src='https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';s.onload=r;document.body.appendChild(s);});}const zip=new JSZip();let baseURL=location.href.split('?')[0].split('#')[0];if(!baseURL.endsWith('/'))baseURL+='/';const visited=new Set();function isValidLink(href,currentURL){try{const u=new URL(href,currentURL);const base=new URL(baseURL);if(u.origin!==base.origin)return false;return u.href.startsWith(base.href);}catch{return false;}}async function parseDirectory(url){const res=await fetch(url);if(!res.ok)throw new Error(`Failed to fetch ${url}: ${res.status}`);const text=await res.text();const doc=new DOMParser().parseFromString(text,'text/html');const links=Array.from(doc.querySelectorAll('a')).map(a=>a.getAttribute('href')).filter(href=>href&&href!=='../'&&href!=='./'&&href.toUpperCase()!=='PARENTDIR'&&isValidLink(href,url));const files=[];const folders=[];for(const link of links){if(link.endsWith('/'))folders.push(link);else files.push(link);}return{files,folders};}async function collectFiles(url,path='',depth=0){if(depth>10)return[];const urlNorm=url.replace(/#.*$/,'');if(visited.has(urlNorm))return[];visited.add(urlNorm);const {files,folders}=await parseDirectory(url);let allFiles=files.map(f=>({url:new URL(f,url).href,path:path+f}));for(const folder of folders){const folderFiles=await collectFiles(new URL(folder,url).href,path+folder,depth+1);allFiles=allFiles.concat(folderFiles);}return allFiles;}try{const status=document.createElement('div');Object.assign(status.style,{position:'fixed',top:'10px',right:'10px',padding:'10px',background:'#333',color:'#fff',font:'12px monospace',zIndex:9999,maxWidth:'400px',overflowWrap:'break-word'});document.body.appendChild(status);status.textContent='Scanning files...';const files=await collectFiles(baseURL);const total=files.length;let count=0;for(const file of files){try{count++;status.textContent=`Downloading file: ${file.path} (${count}/${total})`;const response=await fetch(file.url);if(!response.ok)continue;const blob=await response.blob();zip.file(file.path,blob);}catch{} }status.textContent='Creating ZIP...';const zipBlob=await zip.generateAsync({type:'blob'});const a=document.createElement('a');a.href=URL.createObjectURL(zipBlob);a.download='directory.zip';a.click();status.textContent='Download ready: directory.zip';setTimeout(()=>status.remove(),5000);}catch(e){alert('Error: '+e.message);}})();
